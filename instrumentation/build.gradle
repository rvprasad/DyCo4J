// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

version = '0.6'

// Apply the java plugin to add support for Java
apply plugin: 'java'

jar {
    enabled = false
}

// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.ow2.asm:asm:5.1'
    compile 'org.ow2.asm:asm-commons:5.1'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'com.google.code.gson:gson:2.7'

    compile name: "$JVM_DYN_INFO_COLLECTION_LOGGING"
    compile name: "$JVM_DYN_INFO_COLLECTION_UTILITY"

    testCompile 'junit:junit:4.12'
}

task copyUtility(type: Copy) {
    from '../utility/build/libs/'
    into './libs'
    include("${JVM_DYN_INFO_COLLECTION_UTILITY}.jar")
}

task copyLogger(type: Copy) {
    from '../logging/build/libs/'
    into './libs'
    include("${JVM_DYN_INFO_COLLECTION_LOGGING}.jar")
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << '-Xlint'
    dependsOn copyLogger, copyUtility
}

task copyLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

test {
    systemProperty 'logging.jar', "libs/${JVM_DYN_INFO_COLLECTION_LOGGING}.jar"
    exclude '**/CLITestSubject.class'
}

task entryJar(type: Jar) {
    dependsOn classes, copyLibs, test
    baseName 'dyco4j'
    appendix 'entry-cli'
    from sourceSets.main.output
    exclude '**/internals/**'
    manifest {
        attributes 'Main-Class': 'dyco4j/instrumentation/entry/CLI'
    }
}

task internalsJar(type: Jar) {
    dependsOn classes, copyLibs, test
    baseName 'dyco4j'
    appendix 'internals-cli'
    from sourceSets.main.output
    exclude '**/entry/**'
    manifest {
        attributes 'Main-Class': 'dyco4j/instrumentation/internals/CLI'
    }
}

assemble {
    dependsOn entryJar, internalsJar
}

// Apply jacoco plugin to add support for code coverage
apply plugin: "jacoco"

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

